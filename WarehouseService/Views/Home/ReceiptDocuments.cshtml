<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Документы поступления</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        h1 {
            text-align: center;
            margin-top: 20px;
        }

        nav {
            background-color: #333;
            padding: 10px 20px;
        }

            nav a {
                color: white;
                text-decoration: none;
                margin-right: 20px;
                font-weight: bold;
            }

                nav a:hover {
                    text-decoration: underline;
                }

        .container {
            padding: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        th {
            background: #f4f4f4;
        }

        .form-group {
            margin-bottom: 10px;
        }

        input, select, button {
            padding: 5px;
            margin-right: 5px;
        }

        .resource-row {
            margin-bottom: 5px;
        }

        .filters {
            margin-top: 20px;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>

    <!-- Навигация -->
    <nav>
        <a href="/home/resources">Ресурсы</a>
        <a href="/home/units">Единицы измерения</a>
        <a href="/home/balances">Балансы</a>
        <a href="/home/receipt-documents">Ресурсы поступления</a>
    </nav>

    <div class="container">
        <h1>Документы поступления</h1>

        <!-- Форма создания/редактирования -->
        <h3 id="formTitle">Создать документ</h3>
        <div class="form-group">
            <input type="hidden" id="docId">
            <input type="text" id="documentNumber" placeholder="Номер документа">
            <input type="datetime-local" id="receiptDate">
        </div>

        <div id="resourcesList"></div>
        <button onclick="addResourceRow()">Добавить ресурс</button>

        <div class="form-group">
            <button onclick="saveDocument()">Сохранить</button>
            <button onclick="resetForm()">Отмена</button>
        </div>

        <!-- Фильтры -->
        <h3>Фильтры</h3>
        <div class="filters">
            <input type="text" id="filterDocNumber" placeholder="Номер документа">
            <input type="date" id="filterStartDate">
            <input type="date" id="filterEndDate">
            <select id="filterResource">
                <option value="">Все ресурсы</option>
            </select>
            <select id="filterUnit">
                <option value="">Все единицы</option>
            </select>
            <button onclick="applyFilters()">Применить</button>
            <button onclick="clearFilters()">Сбросить</button>
        </div>

        <!-- Таблица документов -->
        <h3>Список документов</h3>
        <table id="docsTable">
            <thead>
                <tr>
                    <th>Номер</th>
                    <th>Дата</th>
                    <th>Ресурсы</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <script>
        const API_DOCS = '/api/v1/receiptdocuments';
        const API_RESOURCES = '/api/v1/resources';
        const API_UNITS = '/api/v1/units';

        let availableResources = [];
        let availableUnits = [];

        async function loadDropdownData() {
            const resR = await fetch(API_RESOURCES);
            availableResources = await resR.json();
            const resU = await fetch(API_UNITS);
            availableUnits = await resU.json();

            // Заполняем фильтры ресурсами
            const filterResSelect = document.getElementById('filterResource');
            availableResources.forEach(r => {
                const opt = document.createElement('option');
                opt.value = r.id;
                opt.textContent = r.name || '(без названия)';
                filterResSelect.appendChild(opt);
            });

            // Заполняем фильтры единицами
            const filterUnitSelect = document.getElementById('filterUnit');
            availableUnits.forEach(u => {
                const opt = document.createElement('option');
                opt.value = u.id;
                opt.textContent = u.name || '(без названия)';
                filterUnitSelect.appendChild(opt);
            });
        }

        function createResourceSelect(selectedId) {
            const select = document.createElement('select');
            availableResources.forEach(r => {
                const opt = document.createElement('option');
                opt.value = r.id;
                opt.textContent = r.name || '(без названия)';
                if (selectedId && selectedId === r.id) opt.selected = true;
                select.appendChild(opt);
            });
            return select;
        }

        function createUnitSelect(selectedId) {
            const select = document.createElement('select');
            availableUnits.forEach(u => {
                const opt = document.createElement('option');
                opt.value = u.id;
                opt.textContent = u.name || '(без названия)';
                if (selectedId && selectedId === u.id) opt.selected = true;
                select.appendChild(opt);
            });
            return select;
        }

        function addResourceRow(data = {}) {
            const container = document.getElementById('resourcesList');
            const row = document.createElement('div');
            row.className = 'resource-row';

            const resourceSelect = createResourceSelect(data.resourceId);
            const unitSelect = createUnitSelect(data.unitId);
            const qtyInput = document.createElement('input');
            qtyInput.type = 'number';
            qtyInput.value = data.quantity || 0;
            qtyInput.min = 0;

            const delBtn = document.createElement('button');
            delBtn.textContent = 'Удалить';
            delBtn.onclick = () => row.remove();

            row.appendChild(resourceSelect);
            row.appendChild(unitSelect);
            row.appendChild(qtyInput);
            row.appendChild(delBtn);

            container.appendChild(row);
        }

        function getResourcesFromForm() {
            const rows = document.querySelectorAll('#resourcesList .resource-row');
            return Array.from(rows).map(r => ({
                resourceId: r.querySelector('select:nth-child(1)').value,
                unitId: r.querySelector('select:nth-child(2)').value,
                quantity: parseFloat(r.querySelector('input').value)
            }));
        }

        async function loadDocuments(params = {}) {
            let url = API_DOCS;
            const query = [];

            if (params.DocumentNumber) query.push(`DocumentNumber=${encodeURIComponent(params.DocumentNumber)}`);
            if (params.StartDate) query.push(`StartTime=${params.StartDate}`);
            if (params.EndDate) query.push(`EndTime=${params.EndDate}`);
            if (params.ResourceId) query.push(`ResourceId=${params.ResourceId}`);
            if (params.UnitId) query.push(`UnitId=${params.UnitId}`);

            if (query.length > 0) url += '?' + query.join('&');

            const res = await fetch(url);
            const docs = await res.json();
            const tbody = document.querySelector('#docsTable tbody');
            tbody.innerHTML = '';
            docs.forEach(d => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${d.documentNumber || ''}</td>
                    <td>${d.receiptDate ? new Date(d.receiptDate).toLocaleString() : ''}</td>
                    <td>${d.receiptResources ? d.receiptResources.map(rr => rr.resource?.name + ' ' + rr.quantity + ' ' + rr.unit?.name).join(', ') : ''}</td>
                    <td>
                        <button onclick="editDocument('${d.id}')">Редактировать</button>
                        <button onclick="deleteDocument('${d.id}')">Удалить</button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        function applyFilters() {
            const params = {
                DocumentNumber: document.getElementById('filterDocNumber').value.trim(),
                StartDate: document.getElementById('filterStartDate').value || null,
                EndDate: document.getElementById('filterEndDate').value || null,
                ResourceId: document.getElementById('filterResource').value || null,
                UnitId: document.getElementById('filterUnit').value || null
            };
            loadDocuments(params);
        }

        function clearFilters() {
            document.getElementById('filterDocNumber').value = '';
            document.getElementById('filterStartDate').value = '';
            document.getElementById('filterEndDate').value = '';
            document.getElementById('filterResource').value = '';
            document.getElementById('filterUnit').value = '';
            loadDocuments();
        }

        function resetForm() {
            document.getElementById('docId').value = '';
            document.getElementById('documentNumber').value = '';
            document.getElementById('receiptDate').value = '';
            document.getElementById('resourcesList').innerHTML = '';
            document.getElementById('formTitle').textContent = 'Создать документ';
        }

        async function saveDocument() {
            const id = document.getElementById('docId').value;
            const documentNumber = document.getElementById('documentNumber').value.trim();
            const receiptDate = document.getElementById('receiptDate').value;
            const receiptResources = getResourcesFromForm();

            if (!documentNumber || !receiptDate) {
                alert('Заполните номер, дату');
                return;
            }

            const payload = { documentNumber, receiptDate, receiptResources };

            if (id) {
                await fetch(`${API_DOCS}/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
            } else {
                await fetch(API_DOCS, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
            }

            resetForm();
            loadDocuments();
        }

        async function editDocument(id) {
            const res = await fetch(`${API_DOCS}/${id}`);
            const doc = await res.json();

            document.getElementById('docId').value = doc.id;
            document.getElementById('documentNumber').value = doc.documentNumber || '';
            document.getElementById('receiptDate').value = doc.receiptDate ? doc.receiptDate.substring(0, 16) : '';
            document.getElementById('resourcesList').innerHTML = '';
            (doc.receiptResources || []).forEach(rr => {
                addResourceRow({
                    resourceId: rr.resourceId,
                    unitId: rr.unitId,
                    quantity: rr.quantity
                });
            });

            document.getElementById('formTitle').textContent = 'Редактировать документ';
        }

        async function deleteDocument(id) {
            if (!confirm('Удалить документ?')) return;
            await fetch(`${API_DOCS}/${id}`, { method: 'DELETE' });
            loadDocuments();
        }

        (async function init() {
            await loadDropdownData();
            loadDocuments();
        })();
    </script>

</body>
</html>
